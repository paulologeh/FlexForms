{"version":3,"sources":["Canvas/Canvas.js","Items Panel/ItemsPanel.js","Tools/Tools.js","Tools/date-time.js","Tools/time.js","PanelApp.js","serviceWorker.js","index.js"],"names":["Canvas","props","useState","canvasBody","setCanvasBody","console","log","canvasTools","useEffect","newCanvasBody","i","push","React","createElement","renderTools","Segment","padded","Header","as","ItemsPanel","secondary","Container","Input","fluid","type","size","Form","TextArea","toolsColumn1","icon","tool","component","initialState","increment","value","initValue","state","setState","onChange","data","event","newState","toolsColumn2","Tools","handleClick","callbackTool","Grid","celled","columns","Row","Column","List","map","obj","Item","key","Popup","content","trigger","Button","onClick","canvasStyle","width","height","toolsItemsStyle","isInvalid","undefined","PanelApp","getSelectedTool","newCanvasTools","Array","from","clear","className","style","stretched","this","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.713af731.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Segment, Header } from 'semantic-ui-react';\n\nconst Canvas = (props) => {\n\n    const [canvasBody, setCanvasBody] = useState([])\n\n    console.log(props.canvasTools)\n\n    const renderTools = () => {\n        // Marked for efficiency improvement\n        let newCanvasBody = []\n        for (let i in props.canvasTools) {\n            newCanvasBody.push(React.createElement(props.canvasTools[i], null))\n        }\n        setCanvasBody(newCanvasBody)\n    }\n\n    useEffect(\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        () => { renderTools() }, [props]\n    )\n\n    return (\n        <Segment padded>\n            <Header as=\"h2\">Canvas</Header>\n            {canvasBody}\n        </Segment>\n    )\n}\n\nexport default Canvas;","import React from 'react';\nimport { Segment, Header, Input, Container, TextArea, Form } from 'semantic-ui-react';\n\nconst ItemsPanel = () => {\n\n    return (\n        <Segment secondary padded >\n            <Container>\n                <Header as=\"h5\">Items Panel</Header>\n                <label>ID</label>\n                <Input fluid type=\"text\" size=\"small\" />\n                <label>Label</label>\n                <Input fluid type=\"text\" size=\"small\" />\n                <label>Tooltip</label>\n                <Input fluid type=\"text\" size=\"small\" />\n                <label>Help Box</label>\n                <Form> <TextArea /> </Form>\n                <label>Conditions</label>\n                <Segment>\n                    <p><i>Example: Enable if ID1 == true</i></p>\n                </Segment>\n            </Container>\n        </Segment>\n    )\n}\n\nexport default ItemsPanel;","import React from 'react';\nimport { Segment, Header, Grid, List, Button, Popup } from 'semantic-ui-react';\nimport DateTime from './date-time';\nimport Time from './time';\n\nconst toolsColumn1 = [\n    { icon: \"calendar alternate outline\", tool: \"date-time\", component: DateTime },\n    { icon: \"dot circle outline\", tool: \"radio\" },\n    { icon: \"check square outline\", tool: \"checkbox\" },\n    { icon: \"text cursor\", tool: \"text\" },\n    { icon: \"keyboard outline\", tool: \"digit input\" },\n    { icon: \"align justify\", tool: \"list\" },\n    { icon: \"clone outline\", tool: \"panel\" },\n]\n\nconst toolsColumn2 = [\n    { icon: \"clock outline\", tool: \"time\", component: Time },\n    { icon: \"ellipsis vertical\", tool: \"radio-group\" },\n    { icon: \"tasks\", tool: \"checkbox-list\" },\n    { icon: \"font\", tool: \"text-area\" },\n    { icon: \"sliders horizontal\", tool: \"slider\" },\n    { icon: \"dropdown\", tool: \"dropdown\" },\n    { icon: \"square outline\", tool: \"button\" }\n]\n\nconst Tools = (props) => {\n\n    const sendComponent = (component) => {\n        props.callbackTool(component)\n    }\n\n    const handleClick = (data, event) => {\n        console.log(\"Clicked \" + event.icon)\n        // console.log(event.component)\n        sendComponent(event.component)\n    }\n\n    return (\n        <Segment secondary padded>\n            <Header as=\"h5\">Tools</Header>\n            <Grid celled columns={2}>\n                <Grid.Row>\n                    <Grid.Column>\n                        <List>\n                            {toolsColumn1.map((obj, i) =>\n                                <List.Item key={i}>\n                                    <Popup\n                                        content={obj.tool}\n                                        trigger={<Button component={obj.component} icon={obj.icon} key={i} onClick={handleClick} />}\n                                    />\n                                </List.Item>)\n                            }\n                        </List>\n                    </Grid.Column>\n                    <Grid.Column>\n                        <List>\n                            {toolsColumn2.map((obj, i) =>\n                                <List.Item key={i}>\n                                    <Popup\n                                        content={obj.tool}\n                                        trigger={<Button component={obj.component} icon={obj.icon} key={i} onClick={handleClick} />}\n                                    />\n                                </List.Item>)\n                            }\n                        </List>\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        </Segment>\n    )\n}\n\nexport default Tools;","import React, { useState } from 'react';\nimport { Input } from 'semantic-ui-react';\n\nconst DateTime = (props) => {\n\n    const initialState = { increment: props.increment, value: props.initValue };\n\n    const [state, setState] = useState(initialState);\n\n    const handleChange = (data, event) => {\n        let newState = { ...state };\n        newState.value = data.value;\n        setState(newState);\n    }\n\n    return (\n        <Input type=\"datetime-local\" onChange={handleChange} />\n    )\n}\n\nexport default DateTime;","import React, { useState } from 'react';\nimport { Input } from 'semantic-ui-react';\n\nconst Time = (props) => {\n\n    const initialState = { increment: props.increment, value: props.initValue };\n\n    const [state, setState] = useState(initialState);\n\n    const handleChange = (data, event) => {\n        let newState = { ...state };\n        newState.value = data.value;\n        setState(newState);\n    }\n\n    return (\n        <Input type=\"time\" onChange={handleChange} />\n    )\n}\n\nexport default Time;","import React, { Component } from 'react';\nimport { Grid } from 'semantic-ui-react';\nimport './App.css';\nimport Canvas from './Canvas/Canvas';\nimport ItemsPanel from './Items Panel/ItemsPanel';\nimport Tools from './Tools/Tools';\n\nconst canvasStyle = { width: '80vmin', height: '150vmin' }\n\nconst toolsItemsStyle = { width: '35vmin' }\n\nfunction isInvalid(value) {\n  return (value === undefined || value === null) ? true : false\n}\n\nclass PanelApp extends Component {\n\n  state = {\n    canvasTools: []\n  }\n\n  componentDidMount() {\n    console.clear()\n  }\n\n  getSelectedTool = (tool) => {\n    if (isInvalid(tool)) {\n      return;\n    }\n\n    let newCanvasTools = Array.from(this.state.canvasTools)\n    newCanvasTools.push(tool)\n    this.setState({ canvasTools: newCanvasTools })\n    // console.log('tools')\n    // console.log(newCanvasTools)\n    return;\n  }\n\n  render() {\n    // console.log(this.state.canvasTools)\n    return (\n      <div className=\"App\">\n        <Grid columns={2} padded>\n          <Grid.Row>\n            <Grid.Column style={toolsItemsStyle}>\n              <Grid.Row stretched>\n                <Tools callbackTool={this.getSelectedTool} />\n              </Grid.Row>\n              <br />\n              <Grid.Row stretched>\n                <ItemsPanel />\n              </Grid.Row>\n            </Grid.Column>\n            <Grid.Column stretched style={canvasStyle}>\n              <Canvas canvasTools={this.state.canvasTools} />\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </div>\n    )\n  }\n}\n\nexport default PanelApp;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css'\nimport PanelApp from './PanelApp';\nimport * as serviceWorker from './serviceWorker';\n\nrender(<React.StrictMode> <PanelApp /> </React.StrictMode>, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}
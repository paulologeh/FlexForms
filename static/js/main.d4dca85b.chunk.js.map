{"version":3,"sources":["Store.js","Canvas/Canvas.js","Items Panel/ItemsPanel.js","Tools/date-time.js","Tools/time.js","Tools/button.js","Tools/checkbox.js","Tools/Tools.js","Tools/radio.js","Tools/text.js","Tools/digital-input.js","Tools/text-area.js","PanelApp.js","serviceWorker.js","index.js"],"names":["Store","createContext","initial","selectedTool","array","id","label","tooltip","helpbox","conditions","state","disable","value","hide","operator","to","StoreProvider","props","useState","store","updateStore","Provider","children","object_template","Canvas","canvasBody","setCanvasBody","useContext","addToStore","compProps","newObj","newStore","push","useEffect","newCanvasBody","i","canvasTools","key","React","createElement","renderTools","Segment","padded","Header","as","ItemsPanel","selectedItemId","secondary","Container","Input","fluid","type","size","Form","TextArea","DateTime","initialState","initValue","setState","style","width","maxWidth","onChange","event","data","onClick","Time","Button2","Button","Checkbox2","Checkbox","checked","toolsColumn1","icon","tool","component","increment","toolsColumn2","Tools","handleClick","callbackTool","Grid","celled","columns","Row","Column","List","map","obj","Item","Popup","content","trigger","canvasStyle","flexGrow","height","toolsItemsStyle","isInvalid","undefined","PanelApp","getSelectedTool","newCanvasTools","Array","from","console","clear","className","stretched","this","a","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d4dca85b.chunk.js","sourcesContent":["import React, { useState, createContext } from 'react';\n\nexport const Store = createContext();\n\nconst initial = {\n    selectedTool: '',\n    array: [{\n        id: 'test',\n        label: 'test_label',\n        tooltip: 'test_tooltip',\n        helpbox: 'test_helpbox',\n        conditions: [\n            {\n                state: { disable: true, value: false, hide: false },\n                id: 'test2',\n                operator: 'equals',\n                to: 'false'\n            },\n            {\n                state: { disable: false, value: false, hide: true },\n                id: 'test3',\n                operator: 'equals',\n                to: 'true'\n            }\n        ]\n    }]\n}\n\nexport function StoreProvider(props) {\n\n    const [store, updateStore] = useState(initial);\n\n    return (\n        <Store.Provider value={[store, updateStore]}>\n            {props.children}\n        </Store.Provider>\n    );\n}","import React, { useState, useEffect, useContext } from 'react';\nimport { Segment, Header } from 'semantic-ui-react';\nimport { Store } from '../Store';\n\nlet object_template = { id: '', label: '', tooltip: '', helpbox: '', conditions: [] }\n\nconst Canvas = (props) => {\n\n    const [canvasBody, setCanvasBody] = useState([])\n    const [store, updateStore] = useContext(Store)\n\n    const addToStore = (compProps) => {\n        let newObj = { ...object_template }\n        newObj.id = compProps.id\n        let newStore = { ...store }\n        newStore.array.push(newObj)\n        updateStore(newStore)\n    }\n\n    const renderTools = () => {\n        // Marked for efficiency improvement\n        let newCanvasBody = []\n        for (let i in props.canvasTools) {\n            let compProps = { id: 'Tool' + i }\n            addToStore(compProps); // add id to store\n            compProps.key = i\n            newCanvasBody.push(React.createElement(props.canvasTools[i], compProps)); // create component with id\n        }\n        setCanvasBody(newCanvasBody)\n    }\n\n    useEffect(\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        () => { renderTools() }, [props]\n    )\n\n    return (\n        <Segment padded>\n            <Header as=\"h2\">Canvas</Header>\n            {canvasBody}\n        </Segment>\n    )\n}\n\nexport default Canvas;","import React from 'react';\nimport { Segment, Header, Input, Container, TextArea, Form } from 'semantic-ui-react';\n/*\nCustomisable view based on tool selected \n*/\nconst ItemsPanel = (selectedItemId) => {\n\n    return (\n        <Segment secondary padded >\n            <Container>\n                <Header as=\"h5\">Items Panel</Header>\n                <label>ID</label>\n                <Input fluid type=\"text\" size=\"small\" />\n                <label>Label</label>\n                <Input fluid type=\"text\" size=\"small\" />\n                <label>Tooltip</label>\n                <Input fluid type=\"text\" size=\"small\" />\n                <label>Help Box</label>\n                <Form> <TextArea /> </Form>\n                <label>Conditions</label>\n                <Segment>\n                    <p><i>Example: Enable if ID1 == true</i></p>\n                </Segment>\n            </Container>\n        </Segment>\n    )\n}\n\nexport default ItemsPanel;","import React, { useState } from 'react';\nimport { Input } from 'semantic-ui-react';\n\nconst DateTime = (props) => {\n\n    const initialState = props.initValue ? props.initValue : \"\";\n\n    const [state, setState] = useState(initialState);\n\n    const handleChange = (event, data) => { setState(data.value); }\n\n    return (\n        <span>\n            <label></label>\n            <Input style={{ width: 'inherit', maxWidth: '120px' }} type=\"datetime-local\" onChange={handleChange} onClick={props.onClick} value={state} />\n        </span>\n    )\n}\n\nexport default DateTime;","import React, { useState } from 'react';\nimport { Input } from 'semantic-ui-react';\n\nconst Time = (props) => {\n\n    const initialState = props.initValue ? props.initValue : \"\";\n\n    const [state, setState] = useState(initialState);\n\n    const handleChange = (event, data) => { setState(data.value) }\n\n    return (\n        <Input type=\"time\" onChange={handleChange} value={state} />\n    )\n}\n\nexport default Time;","import React from 'react';\nimport { Button } from 'semantic-ui-react';\n\nconst Button2 = (props) => {\n\n    return (\n        <Button />\n    )\n}\n\nexport default Button2;","import React, { useState } from 'react';\nimport { Checkbox } from 'semantic-ui-react';\n\nconst Checkbox2 = (props) => {\n\n    const initialState = props.initValue ? props.initValue : false;\n\n    const [state, setState] = useState(initialState);\n\n    const toggle = () => { setState(!state); }\n\n    return (\n        <Checkbox onClick={toggle} checked={state} />\n    )\n}\n\nexport default Checkbox2;","import React from 'react';\nimport { Segment, Header, Grid, List, Button, Popup } from 'semantic-ui-react';\n/* Custom components */\nimport DateTime from './date-time';\nimport Time from './time';\nimport Button2 from './button';\nimport Checkbox2 from './checkbox';\nimport Radio from './radio';\nimport Text from './text';\nimport Textarea from './text-area';\nimport DigitalInput from './digital-input'\n\n\nconst toolsColumn1 = [\n    { icon: \"calendar alternate outline\", tool: \"date-time\", component: DateTime },\n    { icon: \"dot circle outline\", tool: \"radio\", component: Radio },\n    { icon: \"check square outline\", tool: \"checkbox\", component: Checkbox2 },\n    { icon: \"text cursor\", tool: \"text\", component: Text },\n    { icon: \"keyboard outline\", tool: \"digit input\", component: DigitalInput },\n    { icon: \"align justify\", tool: \"list\" },\n    { icon: \"clone outline\", tool: \"panel\" },\n]\n\nconst toolsColumn2 = [\n    { icon: \"clock outline\", tool: \"time\", component: Time },\n    { icon: \"ellipsis vertical\", tool: \"radio-group\" },\n    { icon: \"tasks\", tool: \"checkbox-list\" },\n    { icon: \"font\", tool: \"text-area\", component: Textarea },\n    { icon: \"sliders horizontal\", tool: \"slider\" },\n    { icon: \"dropdown\", tool: \"dropdown\" },\n    { icon: \"square outline\", tool: \"button\", component: Button2 }\n]\n\nconst Tools = (props) => {\n\n    const sendComponent = (component) => {\n        props.callbackTool(component)\n    }\n\n    const handleClick = (data, event) => {\n        sendComponent(event.component)\n    }\n\n    return (\n        <Segment secondary padded>\n            <Header as=\"h5\">Tools</Header>\n            <Grid celled columns={2}>\n                <Grid.Row>\n                    <Grid.Column>\n                        <List>\n                            {toolsColumn1.map((obj, i) =>\n                                <List.Item key={i}>\n                                    <Popup\n                                        content={obj.tool}\n                                        trigger={<Button component={obj.component} icon={obj.icon} key={i} onClick={handleClick} />}\n                                    />\n                                </List.Item>)\n                            }\n                        </List>\n                    </Grid.Column>\n                    <Grid.Column>\n                        <List>\n                            {toolsColumn2.map((obj, i) =>\n                                <List.Item key={i}>\n                                    <Popup\n                                        content={obj.tool}\n                                        trigger={<Button component={obj.component} icon={obj.icon} key={i} onClick={handleClick} />}\n                                    />\n                                </List.Item>)\n                            }\n                        </List>\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        </Segment>\n    )\n}\n\nexport default Tools;","import React, { useState } from 'react';\nimport { Radio as Radio2 } from 'semantic-ui-react';\n\nconst Radio = (props) => {\n\n    const initialState = props.initValue ? false : props.initValue;\n\n    const [state, setState] = useState(initialState);\n\n    const toggle = () => { setState(!state); }\n\n    return (\n        <Radio2 onClick={toggle} checked={state} />\n    )\n}\n\nexport default Radio;","import React, { useState } from 'react';\nimport { Input } from 'semantic-ui-react';\n\nconst Text = (props) => {\n\n    const initialState = props.initValue ? props.initValue : \"\";\n\n    const [state, setState] = useState(initialState);\n\n    const handleChange = (event, data) => { setState(data.value); }\n\n    return (\n        <Input type=\"text\" onChange={handleChange} value={state} />\n    )\n}\n\nexport default Text;","import React, { useState } from 'react';\nimport { Input } from 'semantic-ui-react';\n\nconst DigitalInput = (props) => {\n\n    const initialState = { increment: props.increment, value: props.initValue };\n\n    const [state, setState] = useState(initialState);\n\n    const handleChange = (event, data) => { setState(data.value); }\n\n    return (\n        <Input type=\"number\" onChange={handleChange} value={state} />\n    )\n}\n\nexport default DigitalInput;","import React, { useState } from 'react';\nimport { TextArea, Form } from 'semantic-ui-react';\n\nconst Textarea = (props) => {\n\n    const initialState = props.initValue ? props.initValue : \"\";\n\n    const [state, setState] = useState(initialState);\n\n    const handleChange = (event, data) => { setState(data.value) }\n\n    return (\n        <Form>\n            <TextArea style={{ maxWidth: '200px' }} onChange={handleChange} value={state} />\n        </Form>\n    )\n}\n\nexport default Textarea;","import React, { Component } from 'react';\nimport { Grid } from 'semantic-ui-react';\nimport './App.css';\nimport Canvas from './Canvas/Canvas';\nimport ItemsPanel from './Items Panel/ItemsPanel';\nimport Tools from './Tools/Tools';\nimport { StoreProvider } from './Store';\n\nconst canvasStyle = { flexGrow: 1, height: '100%' }\n\nconst toolsItemsStyle = { width: '200px' }\n\nfunction isInvalid(value) {\n  return (value === undefined || value === null) ? true : false\n}\n\nclass PanelApp extends Component {\n\n  state = {\n    canvasTools: []\n  }\n\n  componentDidMount() {\n    console.clear()\n  }\n\n  getSelectedTool = (tool) => {\n    if (isInvalid(tool)) {\n      return;\n    }\n\n    let newCanvasTools = Array.from(this.state.canvasTools)\n    newCanvasTools.push(tool)\n    this.setState({ canvasTools: newCanvasTools })\n    return;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Grid columns={2} padded>\n          <Grid.Row>\n            <Grid.Column style={toolsItemsStyle}>\n              <Grid.Row stretched>\n                <Tools callbackTool={this.getSelectedTool} />\n              </Grid.Row>\n              <br />\n              <Grid.Row stretched>\n                <StoreProvider>\n                  <ItemsPanel />\n                </StoreProvider>\n              </Grid.Row>\n            </Grid.Column>\n            <Grid.Column stretched style={canvasStyle} a>\n              <StoreProvider>\n                <Canvas canvasTools={this.state.canvasTools} />\n              </StoreProvider>\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </div>\n    )\n  }\n}\n\nexport default PanelApp;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css'\nimport PanelApp from './PanelApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <PanelApp />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}
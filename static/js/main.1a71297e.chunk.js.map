{"version":3,"sources":["Canvas/Canvas.js","Items Panel/ItemsPanel.js","Tools/Tools.js","PanelApp.js","serviceWorker.js","index.js"],"names":["Canvas","state","Segment","padded","Header","as","Component","ItemsPanel","secondary","Container","Input","fluid","type","size","iconsColumn1","iconsColumn2","Tools","compact","Grid","celled","columns","Row","Column","List","map","icon","i","Item","Icon","name","key","canvasStyle","width","height","toolsItemsStyle","PanelApp","className","style","stretched","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1a71297e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Segment, Header } from 'semantic-ui-react';\n\nclass Canvas extends Component {\n    state = {\n\n    }\n\n    render() {\n        return (\n            <Segment padded>\n                <Header as=\"h2\">Canvas</Header>\n            </Segment>\n        )\n    }\n}\n\nexport default Canvas;","import React from 'react';\nimport { Segment, Header, Input, Container } from 'semantic-ui-react';\n\nconst ItemsPanel = () => {\n\n    return (\n        <Segment secondary padded>\n            <Container>\n                <Header as=\"h5\">Items Panel</Header>\n                <label>ID</label>\n                <Input fluid type=\"text\" size=\"small\" />\n                <label>Label</label>\n                <Input fluid type=\"text\" size=\"small\" />\n                <label>Tooltip</label>\n                <Input fluid type=\"text\" size=\"small\" />\n                <label>Help Box</label>\n                <Input fluid type=\"text\" size=\"small\" />\n                <label>Conditions</label>\n                <Segment>\n                    <p><i>Example: Enable if ID1 == true</i></p>\n                </Segment>\n            </Container>\n        </Segment>\n    )\n}\n\nexport default ItemsPanel;","import React from 'react';\nimport { Segment, Header, Grid, Icon, List } from 'semantic-ui-react';\n\nconst iconsColumn1 = [\n    \"calendar alternate outline\",\n    \"radio\",\n    \"check square outline\",\n    \"text cursor\",\n    \"keyboard outline\",\n    \"dropdown\",\n    \"clone outline\"\n]\n\nconst iconsColumn2 = [\n    \"clock outline\",\n    \"dot circle outline\",\n    \"check square\",\n    \"font\",\n    \"sliders horizontal\",\n    \"list\",\n    \"power off\"\n]\n\nconst Tools = () => {\n    return (\n        <Segment secondary padded compact>\n            <Header as=\"h5\">Tools</Header>\n            <Grid celled columns={2}>\n                <Grid.Row>\n                    <Grid.Column>\n                        <List>\n                            {iconsColumn1.map((icon, i) => <List.Item><Icon name={icon} key={i}></Icon></List.Item>)}\n                        </List>\n                    </Grid.Column>\n                    <Grid.Column>\n                        <List>\n                            {iconsColumn2.map((icon, i) => <List.Item><Icon name={icon} key={i}></Icon></List.Item>)}\n                        </List>\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        </Segment>\n    )\n}\n\nexport default Tools;","import React, { Component } from 'react';\nimport { Grid } from 'semantic-ui-react';\nimport './App.css';\nimport Canvas from './Canvas/Canvas';\nimport ItemsPanel from './Items Panel/ItemsPanel';\nimport Tools from './Tools/Tools';\n\nconst canvasStyle = { width: '140vmin', height: '150vmin' }\n\nconst toolsItemsStyle = { width: '35vmin' }\n\nclass PanelApp extends Component {\n\n  state = {}\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Grid columns={2} padded>\n          <Grid.Row>\n            <Grid.Column padded style={toolsItemsStyle}>\n              <Grid.Row stretched>\n                <Tools />\n              </Grid.Row>\n              <br />\n              <Grid.Row stretched>\n                <ItemsPanel />\n              </Grid.Row>\n            </Grid.Column>\n            <Grid.Column stretched style={canvasStyle}>\n              <Canvas />\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </div>\n    )\n  }\n}\n\nexport default PanelApp;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css'\nimport PanelApp from './PanelApp';\nimport * as serviceWorker from './serviceWorker';\n\nrender(<React.StrictMode> <PanelApp /> </React.StrictMode>, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}